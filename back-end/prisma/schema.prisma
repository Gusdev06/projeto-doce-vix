// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Category {
  id          String    @id @default(uuid())
  guid        String    @unique @default(uuid())
  name        String
  description String
  Product     Product[]
  File        File?     @relation(fields: [fileId], references: [id])
  fileId      String?
  createdAt   DateTime
  updatedAt   DateTime
}

model File {
  id        String     @id @default(uuid())
  guid      String     @unique @default(uuid())
  path      String
  Category  Category[]
  Product   Product[]
  createdAt DateTime
  updatedAt DateTime
}

model Product {
  id          String      @id @default(uuid())
  guid        String      @unique @default(uuid())
  name        String
  description String
  price       Float
  categoryId  String
  category    Category    @relation(fields: [categoryId], references: [id])
  files       File?       @relation(fields: [fileId], references: [id])
  fileId      String?
  createdAt   DateTime
  updatedAt   DateTime
  dayOfWeek   DayOfWeek?  @relation(fields: [dayOfWeekId], references: [id])
  dayOfWeekId String?
  OrderItem   OrderItem[]
}

model DayOfWeek {
  id        String    @id @default(uuid())
  guid      String    @unique @default(uuid())
  name      String
  createdAt DateTime
  updatedAt DateTime
  Product   Product[]
}

model User {
  id           String         @id @default(uuid())
  guid         String         @unique @default(uuid())
  name         String
  email        String
  password     String
  isActive     Boolean        @default(true)
  role         UserRole       @default(USER)
  createdAt    DateTime
  updatedAt    DateTime
  RefreshToken RefreshToken[]
  Order        Order[]

  @@map("users")
}

model RefreshToken {
  id        String   @id @default(uuid())
  guid      String   @unique @default(uuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  expireIn  DateTime
  role      String
  createdAt DateTime
  updatedAt DateTime

  @@map("refresh_token")
}

model Order {
  id        String      @id @default(uuid())
  guid      String      @unique @default(uuid())
  userId    String
  user      User        @relation(fields: [userId], references: [id])
  createdAt DateTime
  updatedAt DateTime
  total     Float
  status    OrderStatus @default(PREPARING)
  itens     OrderItem[]

  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  guid      String   @unique @default(uuid())
  productId String
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  price     Float
  createdAt DateTime
  updatedAt DateTime
  Order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
}

enum OrderStatus {
  PREPARING
  READY
}

enum UserRole {
  ADMIN
  USER
}
